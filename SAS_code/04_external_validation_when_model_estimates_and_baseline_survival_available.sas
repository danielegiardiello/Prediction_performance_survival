*******************************************************************************************************;
* Programme: 	STRATOS External validation when model estimates and baseline survival available.sas   ;
* Author: 		David McLernon																		   ;
* Date: 		26th Feb 2021																	   	   ;
* Purpose: 		STRATOS case study for survival prediction model paper				 				   ;
*				External validation when you only have access to model estimates and baseline survival ;
*				function																			   ;	
* Note:			This programme is not currently automated. It is coded based on the case study in the  ;
* 				article. Therefore, adapting this code for your own study will require careful 	       ;
*				editing according to your data							  							   ;
*******************************************************************************************************;	

* NB Edit folder locations to your own;

OPTIONS MPRINT MLOGIC NONUMBER NODATE SOURCE2 MAXMEMQUERY=MAX /*(fmtsearch = (formats)*/ spool; 
LIBNAME STRATOS 'C:\Users\sme544\Documents\STRATOS';

*macros required;
%INCLUDE 'C:\Users\sme544\Documents\STRATOS\RCSPLINE macro.SAS';
%INCLUDE 'C:\Users\sme544\Documents\STRATOS\STDCA.SAS';


*The model we use is the Nottingham Prognostic Index;
* I = 0.2 X size + stage + grade;
* size = max tumour diameter in cms where 0 is <=20, 1=21-50, 2 is >50;
* stage = number of pos lymph nodes where 0=zero, 1=1 to 3, 2=4+ pos nodes;
* grade = tumour grade 0=Grade 1 or 2, 1=Grade 3;

*** Estimating Baseline Survival Function under PH;
** Here S0 at 5 years =  0.82267;
** For model with PGR added, S0 = 0.77815;
** S(t)=S0(t)**exp(ß1X1+ß2X2+ß3X3+...+ßpXp)=S0(t)**exp(PI);

********************** Import external validation dataset ***************************************;

*code up predictors and apply the original model;
DATA L2GBSG_VA(RENAME=( _D=STATUS NODES1=NODESCAT MENO=MENO_IMP SIZECAT=SIZE));
	SET STRATOS.gbsg_br_ca;
	IF SIZE LE 20 THEN SIZECAT=1;
	IF 21 <= SIZE <= 50 THEN SIZECAT=2;
	IF SIZE >50 THEN SIZECAT=3;
	nodes_imp=nodes;
	nodes1=0;
	if 1<=nodes<=3 then nodes1=1;
	if nodes>3 then nodes1=2;
	grade = grade-1;
	IF GRADE IN (0,1) THEN GRADE=0;
	IF GRADE = 2 THEN GRADE=1;
	SURVTIME=_T;
	*Winzorise PGR to the 99th percentile to deal with very large influential values;
	IF PGR>1360 THEN PGR=1360;
	*use formula to code up spline term for PGR;
	PGR1=max(PGR/61.81,0)**3+(41*max((PGR-486)/61.81,0)**3 -486*max((PGR-41)/61.81,0)**3)/445;
	*now calculate the prob of survival to 5 years;
	SIZEpi = 0;
	IF SIZECAT=2 THEN SIZEpi=0.394;
	IF SIZECAT=3 THEN SIZEpi=0.623;
	NODEpi = 0;
	IF NODES1=1 THEN NODEpi=0.361;
	IF NODES1=2 THEN NODEpi=1.090;
	GRADEpi = 0;
	IF GRADE=1 THEN GRADEpi=0.415;
	PI = SIZEpi + NODEpi + GRADEpi;
	PSURV = 0.82267**EXP(PI);
	PROB = 1- PSURV;
		*now calculate the prob of survival to 5 years for model with PGR included;
	SIZEpi2 = 0;
	IF SIZECAT=2 THEN SIZEpi2=0.369;
	IF SIZECAT=3 THEN SIZEpi2=0.598;
	NODEpi2 = 0;
	IF NODES1=1 THEN NODEpi2=0.386;
	IF NODES1=2 THEN NODEpi2=1.086;
	GRADEpi2 = 0;
	IF GRADE=1 THEN GRADEpi2=0.349;

	PI2 = SIZEpi2 + NODEpi2 + GRADEpi2 - 0.003*PGR + 0.014*PGR1;
	PSURV2 = 0.77815**EXP(PI2);
	PROB2 = 1-PSURV2;
	keep ID SIZECAT NODES1 nodes_imp GRADE _T _D meno age PGR PGR1 ER SURVTIME SIZEpi NODEpi GRADEpi PI PSURV PROB SIZEpi2 NODEpi2 GRADEpi2 PI2 PSURV2 PROB2;
RUN;


*** Descriptive statistics;
PROC FREQ DATA=L2GBSG_VA;
	TABLES SIZE NODESCAT GRADE STATUS;
RUN;

PROC UNIVARIATE DATA=L2GBSG_VA;
	VAR AGE PGR;
RUN;

*use reverse Kaplan-Meier to obtain median follow-up time;
PROC LIFETEST DATA=L2GBSG_VA METHOD=pl ATRISK;
        TIME SURVTIME*STATUS(1);
RUN;


*Administrative censor at 5 years as development cohort; 
DATA L2GBSG_VAL;
	SET L2GBSG_VA;
	*administrative censoring at 5 years;
	IF _T > 5 THEN STATUS=0;
	IF SURVTIME > 5 THEN SURVTIME=5;
	*- keep a copy of survtime for calibration step;
	SURVTIME1=SURVTIME;

	*CLL is the Outcome-Martingale residual, or expected number of events;
	CLL = LOG(-LOG(PSURV));
	CLL_ = LOG(-LOG(PSURV2));
RUN;



****************************************SIMPLE MODEL FIRST (without PGR)******************************************************;

******************APPENDIX 7 - WHAT TO DO IF DEVELOPMENT DATASET OR BASELINE HAZARD ARE NOT AVAILABLE ;

****** ASSUME ORIGINAL MODEL DEVELOPMENT PAPER HAS KAPLAN-MEIER PLOTS FOR RISK GROUPS;
****** Define Risk Groups for K-M - CREATES PLOT IN APPENDIX 7, FIG S7;

*** Define Risk Groups for K-M;

* generate risk groups;
%macro generate_percentiles(ptile1,ptile2,ptile3,mean); 
/* Output desired percentile values */                         
proc univariate data=L2GBSG_VA;                                               
   var PI;                                                       
   output out=test1 mean=&mean pctlpts= &ptile1 &ptile2 &ptile3 pctlpre=xb_;                               
run;                                                                 
 
data test1;
	set test1;
	z=1;
run;

data L2GBSG_VA_;
	set L2GBSG_VAL;
	z=1;
run;

data L2GBSG_VA_1;                                                             
   merge L2GBSG_VA_ test1;        
	by z; 
	riskgp=0;
    if (xb_&ptile1 < PI <= xb_&ptile2) then riskgp=1;
    if (xb_&ptile2 < PI <= xb_&ptile3) then riskgp=2;
	if (PI > xb_&ptile3) then riskgp=3;
	drop z;
run; 
  
%mend;
 
options mprint mlogic symbolgen;
%generate_percentiles(25,50,75,xbmean);


*- plot kaplan-meier in validation dataset;
*mean (SD) of xb is Mean 0.734688 Std Deviation 0.49379 ;
PROC UNIVARIATE DATA=L2GBSG_VA_1;
	VAR PI;
RUN;

*what is the percentage in each risk group - highest in intermediate high risk, lowest in high risk;
/*
riskgp Frequency Percent Cumulative
Frequency Cumulative
Percent 
0 291 42.42 291 42.42 
1 75 10.93 366 53.35 
2 207 30.17 573 83.53 
3 113 16.47 686 100.00 

*/
PROC FREQ DATA=L2GBSG_VA_1;
	TABLE RISKGP;
RUN;

PROC LIFETEST DATA=L2GBSG_VA_1 METHOD=pl PLOTS=(S, LS, LLS) OUTSURV=L2OUTKMv;
        TIME SURVTIME*STATUS(0);
        STRATA RISKGP/TEST=(LOGRANK);	
		*ods output Quartiles=q;
RUN;

DATA L2OUTKMv1(RENAME=(RISKGP=RISKGPV SURVIVAL=SURVIVALV SURVTIME=SURVTIMEV)); 
	SET L2OUTKMv; 
	*LTIME=LOG(TIMELB); 
	*LLS=LOG((-1)*(LOG(SURVIVAL)));
	IF _CENSOR_=1 THEN DELETE; 
	NUM+1;
	KEEP RISKGP SURVIVAL SURVTIME NUM;
RUN;

/*BLOCK FOR NOW
** save 95% CI and merge back for yearly CI;
DATA CI(RENAME=(RISKGP=RISKGPV SURVIVAL=SURVIVALV));
	SET OUTKMv;
	IF SDF_LCL=. THEN DELETE;
	KEEP RISKGP SURVIVAL SDF_LCL SDF_UCL;
RUN;

DATA OUTKMv1_95;
	MERGE OUTKMv1 CI;
	BY RISKGPV DESCENDING SURVIVALV;
RUN;
*/

PROC FORMAT;
	*VALUE DEV 1='Development dataset';
	VALUE VAL 1='Validation dataset';
RUN;

DATA L2OVERLAYKM;
	SET L2OUTKMV1;
	FORMAT GPV1 VAL.;
	IF RISKGPV=0 THEN GPV1=1;
	IF RISKGPV=1 THEN GPV2=1;
	IF RISKGPV=2 THEN GPV3=1;
	IF RISKGPV=3 THEN GPV4=1;
RUN;

*CREATE KAPLAN MEIER PLOT OF RISK GROUPS FOR DEVELOPMENT AND VALIDATION DATASETS;
title;
FOOTNOTE;
*- this allows editing of the .sge file!;
ODS LISTING SGE=ON STYLE=PRINTER IMAGE_DPI=300 GPATH='T:\People\d.mclernon\STRATOS\STRATOS\Figures';
ODS GRAPHICS ON / RESET=ALL NOBORDER OUTPUTFMT=TIFF /*WIDTH=4IN*/ IMAGENAME="L2_Overlay KM" ANTIALIAS=OFF/*ANTIALIASMAX=*/;

*create graph (decision curve) with treat none, treat all, Kaplan-Meier method, and Competing Risks method;
PROC SGPLOT DATA=L2OVERLAYKM;
	YAXIS VALUES=(0 to 1 by 0.2) LABEL="Event-free survival probability";
	XAXIS VALUES=(0 to 5 by 1) LABEL="Years";
	KEYLEGEND "orig" / ACROSS=1 LOCATION=INSIDE POSITION=TOPRIGHT;
	STEP Y=SURVIVALv X=SURVTIMEv / LINEATTRS=(COLOR=BLACK THICKNESS=2 PATTERN=SOLID) NAME="orig" GROUP=GPV1 NOMISSINGGROUP;
	STEP Y=SURVIVALv X=SURVTIMEv / LINEATTRS=(COLOR=BLACK THICKNESS=2 PATTERN=SOLID) GROUP=GPV2 NOMISSINGGROUP;
	STEP Y=SURVIVALv X=SURVTIMEv / LINEATTRS=(COLOR=BLACK THICKNESS=2 PATTERN=SOLID) GROUP=GPV3 NOMISSINGGROUP;
	STEP Y=SURVIVALv X=SURVTIMEv / LINEATTRS=(COLOR=BLACK THICKNESS=2 PATTERN=SOLID) GROUP=GPV4 NOMISSINGGROUP;
RUN;

ODS GRAPHICS OFF;




*********************** FIRST, RESAMPLE 500 VERSIONS OF THE EXTERNAL DATASET WITH REPLACEMENT TO ALLOW CALCULATION OF 95% CI ****************************;


*some bootstrap code to edit;

SASFILE L2GBSG_VAL LOAD; /* a way of loading the dataset into RAM - speeds it up */

PROC SURVEYSELECT DATA=L2GBSG_VAL OUT=OUTBOOT /* Use PROC SURVEYSELECT and provide input and output dataset names */
SEED=4817 /* can enter 0 for it to select a random seed but remember to type it in here from the output otherwise cannot replicate results */
METHOD=URS /* Unrestricted Random Sampling - simple random sampling */
SAMPRATE=1 /* can accept proportions or percentages but we want n to be size of original database so =1 (or 100) */
OUTHITS /* with replacement */
REP=500; /* number of bootstrap samples */
RUN;

SASFILE L2GBSG_VAL CLOSE; /* closes frees RAM buffers when done */

ODS LISTING CLOSE; /* turns off ODS listing so no printing of all output. Better than using NOPRINT as it doesn't allow storage of data in output dataset at end */




**EXTERNAL validation - calculate D and RsqD - use external dataset with linear predictor from original model applied to it;

 *2. Then the prognostic index of the model, XB, is transformed to give standard normal order rank statistics (rankits - formed using Blom’s approximation); 
PROC UNIVARIATE DATA=L2GBSG_VAL;
	HISTOGRAM;
	VAR PI;
RUN;

PROC RANK DATA=L2GBSG_VAL NORMAL=BLOM OUT= L2GBSG_VALRDD;
	VAR PI;
RUN;

PROC UNIVARIATE DATA=L2GBSG_VALRDD;
	HISTOGRAM;
	VAR PI;
RUN;

*  3. The rankits are multiplied by a factor of SQRT(8/pi) to give Zi (i = 1, n subjects);
DATA L2XD;
	SET L2GBSG_VALRDD;
	PIE = CONSTANT("pi");
	Z=PI/(SQRT(8/PIE));
RUN;

PROC UNIVARIATE DATA=L2XD;
	HISTOGRAM;
	VAR z;
RUN;

*  4. Finally a Cox PH model is fitted to these values, D is the coefficient of Z, say a*, from this second model;
*Royston's D is parameter estimate of Z, D = 0.832 (VERY CLOSE TO L1);
ODS SELECT NONE;
PROC PHREG DATA=L2XD;
	MODEL SURVTIME*STATUS(0)=Z / TIES=EFRON;
	ODS OUTPUT ParameterEstimates=L2PAREST;
RUN;
ODS SELECT ALL;

DATA L2ROYSTONEXT(RENAME=(ESTIMATE=D));
	SET L2PAREST;
	PIE = CONSTANT("pi");
	R2D=((ESTIMATE**2)/(8/PIE))/(((ESTIMATE**2)/(8/PIE))+((PIE**2)/6));
	VALIDATE='External';
	IND=1;
	KEEP VALIDATE ESTIMATE R2D IND;
	PROC PRINT; TITLE "Royston's D and RsqD";
RUN;

Obs D R2D VALIDATE 
1 0.83182 0.14177 External ;


*** - NOW WE CALCULATE 95% CI FOR R SQUARED D WITH BOOTSTRAP;

PROC RANK DATA=OUTBOOT NORMAL=BLOM OUT= L2GBSG_VALRDDZ;
	BY REPLICATE;
	VAR PI;
RUN;

*  3. The rankits are multiplied by a factor of SQRT(8/pi) to give Zi (i = 1, n subjects);
DATA L2XDZ;
	SET L2GBSG_VALRDDZ;
	PIE = CONSTANT("pi");
	Z=PI/(SQRT(8/PIE));
RUN;

ODS SELECT NONE;
PROC PHREG DATA=L2XDZ;
	BY REPLICATE;
	MODEL SURVTIME*STATUS(0)=Z / TIES=EFRON;
	ODS OUTPUT ParameterEstimates=L2PARESTZ;
RUN;
ODS SELECT ALL;

DATA L2ROYSTONEXTZ(RENAME=(ESTIMATE=D));
	SET L2PARESTZ;
	PIE = CONSTANT("pi");
	R2D=((ESTIMATE**2)/(8/PIE))/(((ESTIMATE**2)/(8/PIE))+((PIE**2)/6));
	KEEP REPLICATE ESTIMATE R2D;
	PROC PRINT; TITLE "Royston's D and RsqD";
RUN;

PROC UNIVARIATE DATA=L2ROYSTONEXTZ NOPRINT;
	VAR D R2D;
	OUTPUT OUT = CONFINT PCTLPTS=2.5 97.5 PCTLPRE= AppD_ AppR2D_ PCTLNAME=LOWER95 UPPER95;
RUN;

DATA CONFINT1;
	SET CONFINT;
	IND=1;
RUN;

DATA ROYSTONAX2;
 	RETAIN VALIDATE D AppD_LOWER95 AppD_UPPER95 R2D AppR2D_LOWER95 AppR2D_UPPER95;
	MERGE L2ROYSTONEXT CONFINT1;
	BY IND;
	DROP IND;
RUN;

PROC PRINT DATA=ROYSTONAX2; TITLE "Royston's D and RsqD with 95% CI";
RUN;





***************External validation - Calculate Brier score;

*calculate weights for external validation;
PROC LIFETEST DATA=L2GBSG_VAL METHOD=KM ATRISK OUTSURV=L2OUTKM_EXT NOPRINT;
        TIME SURVTIME*STATUS(1);
RUN;

*CODE THE 3 GROUPINGS AND DUPLICATE SURVIVAL TIME AS SAS WILL REMOVE THE OFFICIAL SURVIVAL TIME VARIABLE IN BASELINE STATEMENT;
*in external;
DATA L2ROTT_B_EX;
	SET L2GBSG_VAL;
	IF SURVTIME<=4.95 AND STATUS=1 THEN CAT=1;
	IF SURVTIME>4.95 THEN CAT=2;
	IF SURVTIME<=4.95 AND STATUS=0 THEN CAT=3;
	*TIME=SURVTIME;
	PROC SORT; BY SURVTIME;
RUN;

DATA L2OUTKM_EXT1;
	SET L2OUTKM_EXT;
	*IF _CENSOR_=1 THEN DELETE;
	*IF SURVTIME>5 THEN DELETE;
	WEIGHT=1/SURVIVAL;
	KEEP SURVTIME SURVIVAL WEIGHT;
RUN;

DATA L2OUTKM_EXT2;
	SET L2OUTKM_EXT1;
	S=LAG(SURVTIME);
	IF SURVTIME=S THEN DELETE;
	DROP S;
RUN;

DATA L2ROTTVAL_BS2;
	MERGE L2ROTT_B_EX L2OUTKM_EXT1;
	BY SURVTIME;
	IF ID=. THEN DELETE;
RUN;

DATA L2ROTTVAL_BS3;
	SET L2ROTTVAL_BS2;
	RETAIN _WEIGHT;
	IF NOT MISSING(WEIGHT) THEN _WEIGHT=WEIGHT;
	ELSE WEIGHT=_WEIGHT;
	IF CAT=3 THEN WEIGHT=0;
	IF SURVTIME=0 THEN DELETE;
	IF CAT=1 THEN CONTRIB=(-PSURV)**2;
	IF CAT=2 THEN CONTRIB=(1-PSURV)**2;
	IF CAT=3 THEN CONTRIB=0;
	BS=CONTRIB*WEIGHT;
	DROP _WEIGHT;
RUN;

*ESTIMATE BRIER SCORE;
PROC UNIVARIATE DATA=L2ROTTVAL_BS3 NOPRINT;
	VAR BS WEIGHT;
	OUTPUT OUT=L2SUMSEX SUM=SBS SWEIGHT;
	PROC PRINT; 
RUN;

DATA L2SUMSEX;
	RETAIN SWEIGHT SBS BRIER;
	SET L2SUMSEX;
	BRIER = (1/SWEIGHT)*SBS;
	SWEIGHT=LEFT(SWEIGHT);
	TITLE 'External Brier score';
	PROC PRINT;
RUN;


**** - CALCULATE BOOTSTRAPPED 95% CI FOR BRIER SCORE;


*calculate weights for external validation;
PROC LIFETEST DATA=OUTBOOT METHOD=KM ATRISK OUTSURV=L2OUTKM_EXTX NOPRINT;
		BY REPLICATE;
        TIME SURVTIME*STATUS(1);
RUN;

*CODE THE 3 GROUPINGS AND DUPLICATE SURVIVAL TIME AS SAS WILL REMOVE THE OFFICIAL SURVIVAL TIME VARIABLE IN BASELINE STATEMENT;
*in external;
DATA L2ROTT_B_EXX;
	SET OUTBOOT;
	IF SURVTIME<=4.95 AND STATUS=1 THEN CAT=1;
	IF SURVTIME>4.95 THEN CAT=2;
	IF SURVTIME<=4.95 AND STATUS=0 THEN CAT=3;
	*TIME=SURVTIME;
	PROC SORT; BY REPLICATE SURVTIME;
RUN;

DATA L2OUTKM_EXT1X;
	SET L2OUTKM_EXTX;
	*IF _CENSOR_=1 THEN DELETE;
	*IF SURVTIME>5 THEN DELETE;
	WEIGHT=1/SURVIVAL;
	KEEP REPLICATE SURVTIME SURVIVAL WEIGHT;
RUN;

DATA L2ROTTVAL_BS2X;
	MERGE L2ROTT_B_EXX L2OUTKM_EXT1X;
	BY REPLICATE SURVTIME;
	IF ID=. THEN DELETE;
RUN;

DATA L2ROTTVAL_BS3X;
	SET L2ROTTVAL_BS2X;
	RETAIN _WEIGHT;
	IF NOT MISSING(WEIGHT) THEN _WEIGHT=WEIGHT;
	ELSE WEIGHT=_WEIGHT;
	IF CAT=3 THEN WEIGHT=0;
	IF SURVTIME=0 THEN DELETE;
	IF CAT=1 THEN CONTRIB=(-PSURV)**2;
	IF CAT=2 THEN CONTRIB=(1-PSURV)**2;
	IF CAT=3 THEN CONTRIB=0;
	BS=CONTRIB*WEIGHT;
	DROP _WEIGHT;
RUN;

*ESTIMATE BRIER SCORE;
PROC UNIVARIATE DATA=L2ROTTVAL_BS3X NOPRINT;
	BY REPLICATE;
	VAR BS WEIGHT;
	OUTPUT OUT=L2SUMSEXX SUM=SBS SWEIGHT;
	PROC PRINT; 
RUN;

DATA L2SUMSEXX;
	RETAIN SWEIGHT SBS BRIER;
	SET L2SUMSEXX;
	BRIER = (1/SWEIGHT)*SBS;
	SWEIGHT=LEFT(SWEIGHT);
RUN;





*SCALED BRIER FOR External validation;
PROC PHREG DATA=L2GBSG_VAL;
	MODEL SURVTIME*STATUS(0)= / TIES=EFRON RL;
	*APPARENT;
	BASELINE COVARIATES=L2ROTT_B_EX OUT=L2ROTTVAL_BSnull TIMELIST=5 SURVIVAL=FIVEYRSURV_null;
RUN;

*Brier for null model;
DATA L2ROTTVAL_BS1null;
	SET L2ROTTVAL_BSnull;
	KEEP ID FIVEYRSURV_null;
	PROC SORT; BY ID;
RUN;

PROC SORT DATA=L2ROTTVAL_BS3;
	BY ID;
RUN;

*MERGE THE BULL SURVIVAL PROBS TO THE BRIER SCORE DATASET FROM EARLIER;
DATA L2ROTTVAL_BS4;
	MERGE L2ROTTVAL_BS3 L2ROTTVAL_BS1null;
	BY ID;
RUN;

DATA L2ROTTVAL_BS5;
	SET L2ROTTVAL_BS4;
	IF CAT=1 THEN CONTRIB_NULL=(-FIVEYRSURV_null)**2;
	IF CAT=2 THEN CONTRIB_NULL=(1-FIVEYRSURV_null)**2;
	IF CAT=3 THEN CONTRIB_NULL=0;
	BS_NULL=CONTRIB_NULL*WEIGHT;
	DROP FIVEYRSURV_null;
RUN;

*ESTIMATE BRIER SCORE FOR NULL MODEL;
PROC UNIVARIATE DATA=L2ROTTVAL_BS5 NOPRINT;
	VAR BS_NULL WEIGHT;
	OUTPUT OUT=L2SUMNULLEX SUM=SBS_NULL SWEIGHT;
	PROC PRINT; 
RUN;

DATA L2SUMNULLEX;
	RETAIN SWEIGHT SBS_NULL;
	SET L2SUMNULLEX;
	SWEIGHT=LEFT(SWEIGHT);
RUN;

*CALCULATE SCALED BRIER FOR EXTERNAL VALIDATION;
DATA L2IPA;
	MERGE L2SUMSEX L2SUMNULLEX;
	BY SWEIGHT;
	NULL_BRIER = (1/SWEIGHT)*SBS_NULL;
	SCALEDB = 1-(BRIER/NULL_BRIER);
	IND=1;
		TITLE 'External Brier score and Scaled Brier score';
	PROC PRINT;
RUN;

/*External Brier score and IPA 

if use 4.9999
Obs SWEIGHT SBS 	BRIER 	SBS_NULL 	NULL_BRIER 	IPA 
1 	686 	155.678 0.22694 171.450 	0.24993 	0.091993 

if use 4.95
Obs SWEIGHT SBS BRIER SBS_NULL NULL_BRIER IPA 
1 702.425 156.712 0.22310 175.766 0.25023 0.10841 
*/


**** - CALCULATE BOOTSTRAPPED 95% CI FOR SCALED BRIER;


PROC PHREG DATA=OUTBOOT NOPRINT;
	BY REPLICATE;
	MODEL SURVTIME*STATUS(0)= / TIES=EFRON RL;
	BASELINE COVARIATES=L2ROTT_B_EXX OUT=L2ROTTVAL_BSnullX TIMELIST=5 SURVIVAL=FIVEYRSURV_null;
RUN;

*Brier for null model;
DATA L2ROTTVAL_BS1nullX;
	SET L2ROTTVAL_BSnullX;
	KEEP REPLICATE ID FIVEYRSURV_null;
	PROC SORT; BY REPLICATE ID;
RUN;

PROC SORT DATA=L2ROTTVAL_BS3X;
	BY REPLICATE ID;
RUN;

*MERGE THE BULL SURVIVAL PROBS TO THE BRIER SCORE DATASET FROM EARLIER;
DATA L2ROTTVAL_BS4X;
	MERGE L2ROTTVAL_BS3X L2ROTTVAL_BS1nullX;
	BY REPLICATE ID;
RUN;

DATA L2ROTTVAL_BS5X;
	SET L2ROTTVAL_BS4X;
	IF CAT=1 THEN CONTRIB_NULL=(-FIVEYRSURV_null)**2;
	IF CAT=2 THEN CONTRIB_NULL=(1-FIVEYRSURV_null)**2;
	IF CAT=3 THEN CONTRIB_NULL=0;
	BS_NULL=CONTRIB_NULL*WEIGHT;
	DROP FIVEYRSURV_null;
RUN;

*ESTIMATE BRIER SCORE FOR NULL MODEL;
PROC UNIVARIATE DATA=L2ROTTVAL_BS5X NOPRINT;
	BY REPLICATE;
	VAR BS_NULL WEIGHT;
	OUTPUT OUT=L2SUMNULLEXX SUM=SBS_NULL SWEIGHT;
	PROC PRINT; 
RUN;

DATA L2SUMNULLEXX;
	RETAIN SWEIGHT SBS_NULL;
	SET L2SUMNULLEXX;
	SWEIGHT=LEFT(SWEIGHT);
RUN;

*CALCULATE SCALED BRIER FOR EXTERNAL VALIDATION;
DATA L2IPAX;
	MERGE L2SUMSEXX L2SUMNULLEXX;
	BY REPLICATE SWEIGHT;
	NULL_BRIER = (1/SWEIGHT)*SBS_NULL;
	SCALEDB = 1-(BRIER/NULL_BRIER);
	PROC PRINT;
RUN;

PROC UNIVARIATE DATA=L2IPAX NOPRINT;
	VAR BRIER SCALEDB;
	OUTPUT OUT = CONFINTR PCTLPTS=2.5 97.5 PCTLPRE= BRIER_ SCALEDB_ PCTLNAME=LOWER95 UPPER95;
RUN;

DATA CONFINTR1;
	SET CONFINTR;
	IND=1;
RUN;

DATA BRIERAX2;
 	RETAIN BRIER BRIER_LOWER95 BRIER_UPPER95 SCALEDB SCALEDB_LOWER95 SCALEDB_UPPER95;
	MERGE L2IPA CONFINTR1;
	BY IND;
	DROP IND SWEIGHT SBS SBS_NULL NULL_BRIER;
	TITLE 'External Brier score and Scaled Brier score with 95% CI';
	PROC PRINT;
RUN;

********************************************************************* ABOVE REPEATED FOR ADDED MARKER ***************************************************;


**EXTERNAL;
PROC UNIVARIATE DATA=L2GBSG_VAL;
	HISTOGRAM;
	VAR PI2;
RUN;

PROC RANK DATA=L2GBSG_VAL NORMAL=BLOM OUT= L2GBSG_VALRDDa;
	VAR PI2;
RUN;

PROC UNIVARIATE DATA=L2GBSG_VALRDDa;
	HISTOGRAM;
	VAR PI2;
RUN;

DATA L2XDa;
	SET L2GBSG_VALRDDa;
	PIE = CONSTANT("pi");
	Z=PI2/(SQRT(8/PIE));
RUN;

PROC UNIVARIATE DATA=L2XDa;
	HISTOGRAM;
	VAR z;
RUN;

*Royston's D is parameter estimate of Z, D = 0.94088;
ODS SELECT NONE;
PROC PHREG DATA=L2XDa;
	MODEL SURVTIME*STATUS(0)=Z / TIES=EFRON;
	ODS OUTPUT ParameterEstimates=L2PARESTa;
RUN;
ODS SELECT ALL;

DATA L2ROYSTONEXTaa(RENAME=(ESTIMATE=D));
	SET L2PARESTa;
	PIE = CONSTANT("pi");
	R2D=((ESTIMATE**2)/(8/PIE))/(((ESTIMATE**2)/(8/PIE))+((PIE**2)/6));
	VALIDATE='External';
	IND=1;
	KEEP VALIDATE ESTIMATE R2D IND;
	PROC PRINT; TITLE "Royston's D and RsqD with PGR";
RUN;


*** - NOW WE CALCULATE 95% CI FOR R SQUARED D WITH BOOTSTRAP;

PROC RANK DATA=OUTBOOT NORMAL=BLOM OUT= L2GBSG_VALRDDaZ;
	BY REPLICATE;
	VAR PI2;
RUN;

*  3. The rankits are multiplied by a factor of SQRT(8/pi) to give Zi (i = 1, n subjects);
DATA L2XDaZ;
	SET L2GBSG_VALRDDaZ;
	PIE = CONSTANT("pi");
	Z=PI2/(SQRT(8/PIE));
RUN;

ODS SELECT NONE;
PROC PHREG DATA=L2XDaZ;
	BY REPLICATE;
	MODEL SURVTIME*STATUS(0)=Z / TIES=EFRON;
	ODS OUTPUT ParameterEstimates=L2PARESTaZ;
RUN;
ODS SELECT ALL;

DATA L2ROYSTONEXTaZ(RENAME=(ESTIMATE=D));
	SET L2PARESTaZ;
	PIE = CONSTANT("pi");
	R2D=((ESTIMATE**2)/(8/PIE))/(((ESTIMATE**2)/(8/PIE))+((PIE**2)/6));
	KEEP REPLICATE ESTIMATE R2D;
RUN;

PROC UNIVARIATE DATA=L2ROYSTONEXTaZ NOPRINT;
	VAR D R2D;
	OUTPUT OUT = CONFINTa PCTLPTS=2.5 97.5 PCTLPRE= AppD_ AppR2D_ PCTLNAME=LOWER95 UPPER95;
RUN;

DATA CONFINT1a;
	SET CONFINTa;
	IND=1;
RUN;

DATA ROYSTONAX2a;
 	RETAIN VALIDATE D AppD_LOWER95 AppD_UPPER95 R2D AppR2D_LOWER95 AppR2D_UPPER95;
	MERGE L2ROYSTONEXTaa CONFINT1a;
	BY IND;
	DROP IND;
	PROC PRINT; TITLE "Royston's D and RsqD with 95% CI";
RUN;




*external validation brier;

*for external validation;
PROC LIFETEST DATA=L2GBSG_VAL METHOD=pl ATRISK /*PLOTS=(S, LS, LLS)*/ OUTSURV=L2OUTKM_EXTa NOPRINT;
        TIME SURVTIME*STATUS(1);
RUN;

DATA L2ROTT_B_EXa;
	SET L2GBSG_VAL;
	IF SURVTIME<=4.95 AND STATUS=1 THEN CAT=1;
	IF SURVTIME>4.95 THEN CAT=2;
	IF SURVTIME<=4.95 AND STATUS=0 THEN CAT=3;
	*TIME=SURVTIME;
	PROC SORT; BY SURVTIME;
RUN;

DATA L2OUTKM_EXT1a;
	SET L2OUTKM_EXTa;
	*IF _CENSOR_=1 THEN DELETE;
	*IF SURVTIME>5 THEN DELETE;
	WEIGHT=1/SURVIVAL;
	KEEP SURVTIME WEIGHT;
RUN;

DATA L2ROTTVAL_BS2a;
	MERGE L2ROTT_B_EXa L2OUTKM_EXT1a;
	BY SURVTIME;
	IF ID=. THEN DELETE;
RUN;

DATA L2ROTTVAL_BS3a;
	SET L2ROTTVAL_BS2a;
	RETAIN _WEIGHT;
	IF NOT MISSING(WEIGHT) THEN _WEIGHT=WEIGHT;
	ELSE WEIGHT=_WEIGHT;
	IF CAT=3 THEN WEIGHT=0;
	IF SURVTIME=0 THEN DELETE;
	IF CAT=1 THEN CONTRIB=(-PSURV2)**2;
	IF CAT=2 THEN CONTRIB=(1-PSURV2)**2;
	IF CAT=3 THEN CONTRIB=0;
	BS=CONTRIB*WEIGHT;
	DROP _WEIGHT;
RUN;

*ESTIMATE BRIER SCORE;
PROC UNIVARIATE DATA=L2ROTTVAL_BS3a NOPRINT;
	VAR BS WEIGHT;
	OUTPUT OUT=L2SUMSEXa SUM=SBS SWEIGHT;
	PROC PRINT; 
RUN;

DATA L2SUMSEXa;
	SET L2SUMSEXa;
	BRIER = (1/SWEIGHT)*SBS;
	SWEIGHT=LEFT(SWEIGHT);
	TITLE 'External Brier score for PGR';
	PROC PRINT;
RUN;


**** - CALCULATE BOOTSTRAPPED 95% CI FOR BRIER SCORE;


*calculate weights for external validation;
PROC LIFETEST DATA=OUTBOOT METHOD=KM ATRISK OUTSURV=L2OUTKM_EXTX_ NOPRINT;
		BY REPLICATE;
        TIME SURVTIME*STATUS(1);
RUN;

*CODE THE 3 GROUPINGS AND DUPLICATE SURVIVAL TIME AS SAS WILL REMOVE THE OFFICIAL SURVIVAL TIME VARIABLE IN BASELINE STATEMENT;
*in external;
DATA L2ROTT_B_EXX_;
	SET OUTBOOT;
	IF SURVTIME<=4.95 AND STATUS=1 THEN CAT=1;
	IF SURVTIME>4.95 THEN CAT=2;
	IF SURVTIME<=4.95 AND STATUS=0 THEN CAT=3;
	*TIME=SURVTIME;
	PROC SORT; BY REPLICATE SURVTIME;
RUN;

DATA L2OUTKM_EXT1X_;
	SET L2OUTKM_EXTX_;
	*IF _CENSOR_=1 THEN DELETE;
	*IF SURVTIME>5 THEN DELETE;
	WEIGHT=1/SURVIVAL;
	KEEP REPLICATE SURVTIME SURVIVAL WEIGHT;
RUN;

DATA L2ROTTVAL_BS2X_;
	MERGE L2ROTT_B_EXX_ L2OUTKM_EXT1X_;
	BY REPLICATE SURVTIME;
	IF ID=. THEN DELETE;
RUN;

DATA L2ROTTVAL_BS3X_;
	SET L2ROTTVAL_BS2X_;
	RETAIN _WEIGHT;
	IF NOT MISSING(WEIGHT) THEN _WEIGHT=WEIGHT;
	ELSE WEIGHT=_WEIGHT;
	IF CAT=3 THEN WEIGHT=0;
	IF SURVTIME=0 THEN DELETE;
	IF CAT=1 THEN CONTRIB=(-PSURV2)**2;
	IF CAT=2 THEN CONTRIB=(1-PSURV2)**2;
	IF CAT=3 THEN CONTRIB=0;
	BS=CONTRIB*WEIGHT;
	DROP _WEIGHT;
RUN;

*ESTIMATE BRIER SCORE;
PROC UNIVARIATE DATA=L2ROTTVAL_BS3X_ NOPRINT;
	BY REPLICATE;
	VAR BS WEIGHT;
	OUTPUT OUT=L2SUMSEXX_ SUM=SBS SWEIGHT;
	PROC PRINT; 
RUN;

DATA L2SUMSEXX_;
	RETAIN SWEIGHT SBS BRIER;
	SET L2SUMSEXX_;
	BRIER = (1/SWEIGHT)*SBS;
	SWEIGHT=LEFT(SWEIGHT);
	PROC PRINT;
RUN;



*** Scaled Brier for model with PGR included;

PROC SORT DATA=L2ROTTVAL_BS3a;
	BY ID;
RUN;

DATA L2ROTTVAL_BS4a;
	MERGE L2ROTTVAL_BS3a L2ROTTVAL_BS1null;
	BY ID;
RUN;

DATA L2ROTTVAL_BS5a;
	SET L2ROTTVAL_BS4a;
	*RETAIN _SURVIVAL;
	*IF NOT MISSING(SURVIVAL) THEN _SURVIVAL=SURVIVAL;
	*ELSE SURVIVAL=_SURVIVAL;
	*IF TIME1=0 THEN DELETE;
	IF CAT=1 THEN CONTRIB_NULL=(-FIVEYRSURV_null)**2;
	IF CAT=2 THEN CONTRIB_NULL=(1-FIVEYRSURV_null)**2;
	IF CAT=3 THEN CONTRIB_NULL=0;
	BS_NULL=CONTRIB_NULL*WEIGHT;
	DROP FIVEYRSURV_null;
RUN;

*ESTIMATE BRIER SCORE;
PROC UNIVARIATE DATA=L2ROTTVAL_BS5a NOPRINT;
	VAR BS_NULL WEIGHT;
	OUTPUT OUT=L2SUMNULLEXa SUM=SBS_NULL SWEIGHT;
	PROC PRINT; 
RUN;

DATA L2SUMNULLEXa;
	SET L2SUMNULLEXa;
	SWEIGHT=LEFT(SWEIGHT);
RUN;

DATA L2SCALEDBa;
	MERGE L2SUMSEXa L2SUMNULLEXa;
	BY SWEIGHT;
	NULL_BRIER = (1/SWEIGHT)*SBS_NULL;
	SCALEDB = 1-(BRIER/NULL_BRIER);
	IND=1;
	TITLE 'External Brier score and Scaled Brier with PGR';
	PROC PRINT;
RUN;



**** - CALCULATE BOOTSTRAPPED 95% CI FOR SCALED BRIER;


PROC PHREG DATA=OUTBOOT NOPRINT;
	BY REPLICATE;
	MODEL SURVTIME*STATUS(0)= / TIES=EFRON RL;
	BASELINE COVARIATES=L2ROTT_B_EXX_ OUT=L2ROTTVAL_BSnullX_ TIMELIST=5 SURVIVAL=FIVEYRSURV_null;
RUN;

*Brier for null model;
DATA L2ROTTVAL_BS1nullX_;
	SET L2ROTTVAL_BSnullX_;
	KEEP REPLICATE ID FIVEYRSURV_null;
	PROC SORT; BY REPLICATE ID;
RUN;

PROC SORT DATA=L2ROTTVAL_BS3X_;
	BY REPLICATE ID;
RUN;

*MERGE THE BULL SURVIVAL PROBS TO THE BRIER SCORE DATASET FROM EARLIER;
DATA L2ROTTVAL_BS4X_;
	MERGE L2ROTTVAL_BS3X_ L2ROTTVAL_BS1nullX_;
	BY REPLICATE ID;
RUN;

DATA L2ROTTVAL_BS5X_;
	SET L2ROTTVAL_BS4X_;
	IF CAT=1 THEN CONTRIB_NULL=(-FIVEYRSURV_null)**2;
	IF CAT=2 THEN CONTRIB_NULL=(1-FIVEYRSURV_null)**2;
	IF CAT=3 THEN CONTRIB_NULL=0;
	BS_NULL=CONTRIB_NULL*WEIGHT;
	DROP FIVEYRSURV_null;
RUN;

*ESTIMATE BRIER SCORE FOR NULL MODEL;
PROC UNIVARIATE DATA=L2ROTTVAL_BS5X_ NOPRINT;
	BY REPLICATE;
	VAR BS_NULL WEIGHT;
	OUTPUT OUT=L2SUMNULLEXX_ SUM=SBS_NULL SWEIGHT;
	PROC PRINT; 
RUN;

DATA L2SUMNULLEXX_;
	RETAIN SWEIGHT SBS_NULL;
	SET L2SUMNULLEXX_;
	SWEIGHT=LEFT(SWEIGHT);
RUN;

*CALCULATE SCALED BRIER FOR EXTERNAL VALIDATION;
DATA L2IPAX_;
	MERGE L2SUMSEXX_ L2SUMNULLEXX_;
	BY REPLICATE SWEIGHT;
	NULL_BRIER = (1/SWEIGHT)*SBS_NULL;
	SCALEDB = 1-(BRIER/NULL_BRIER);
	PROC PRINT;
RUN;

PROC UNIVARIATE DATA=L2IPAX_ NOPRINT;
	VAR BRIER SCALEDB;
	OUTPUT OUT = CONFINTR_ PCTLPTS=2.5 97.5 PCTLPRE= BRIER_ SCALEDB_ PCTLNAME=LOWER95 UPPER95;
RUN;

DATA CONFINTR1_;
	SET CONFINTR_;
	IND=1;
RUN;

DATA BRIERAX2;
 	RETAIN BRIER BRIER_LOWER95 BRIER_UPPER95 SCALEDB SCALEDB_LOWER95 SCALEDB_UPPER95;
	MERGE L2SCALEDBa CONFINTR1_;
	BY IND;
	DROP IND SWEIGHT SBS SBS_NULL NULL_BRIER;
	TITLE 'External Brier score and Scaled Brier score with 95% CI';
	PROC PRINT;
RUN;



*- discrimination;


/*  estimate time-dependent AUROC - Uno  */
*CALCULATE WEIGHTS FIRST WITH INVERSE KM;
DATA OUTKM_EXT_UNO;
	SET L2ROTTVAL_BS2;
	RETAIN _SURVIVAL;
	IF NOT MISSING(SURVIVAL) THEN _SURVIVAL=SURVIVAL;
	ELSE SURVIVAL=_SURVIVAL;
	W=SURVIVAL;
	WSQ=W*W;
	DROP _SURVIVAL;
RUN;

* Get KM censor probability at time T 4.95 years (chose 4.95 instead of 5 because no one left after 5 years so won't work - took time of last event);
DATA CTIME1;
	SET L2OUTKM_EXT;
	IF SURVTIME GT 4.95 THEN DELETE;
RUN;

*GET LAST PROB AT TIME T;
DATA CTIME2(RENAME=(SURVIVAL=PROBC));
	IF 0 THEN
		SET CTIME1 NOBS=NOBS END=EOF;
	SET CTIME1 POINT=NOBS;
	KEEP SURVIVAL;
	OUTPUT;
	STOP;
RUN;

TITLE 'This is the KM censoring probability at time T';
PROC PRINT DATA=CTIME2;
RUN;


* Get KM survival probability at time T 4.95 years (chose 4.95 instead of 5 because no one left after 5 years so won't work - took time of last event);
PROC LIFETEST DATA=OUTKM_EXT_UNO METHOD=KM ATRISK OUTSURV=STIME NOPRINT;
        TIME SURVTIME*STATUS(0);
RUN;

DATA STIME1;
	SET STIME;
	IF SURVTIME GT 4.95 THEN DELETE;
RUN;

*GET LAST SURVIVAL PROB AT TIME T;
DATA STIME2(RENAME=(SURVIVAL=PROBT));
	IF 0 THEN
		SET STIME1 NOBS=NOBS END=EOF;
	SET STIME1 POINT=NOBS;
	KEEP SURVIVAL;
	OUTPUT;
	STOP;
RUN;

TITLE 'This is the KM survival probability at time T';
PROC PRINT DATA=STIME2;
RUN;



*THE BELOW FORMULA COMES FROM BLANCHE ET AL 2013 BIOM J PAPER, I GET 0.688 - same as 0.688 FROM L1;

PROC IML;
USE OUTKM_EXT_UNO VAR {STATUS SURVTIME PI W};
READ ALL;
SHOW NAMES;
CH = 0;
/*ENTER TOTAL NUMBER IN DATASET*/
N=686;
/*ENTER TIME*/
T=4.95;
/*ENTER KM PROB OF CENSOR AT TIME T FROM ABOVE*/
PROBC=0.37674;
/*ENTER KM PROB OF SURVIVAL AT TIME T FROM ABOVE*/
PROBT=0.49939;

DO I = 1 TO N;
   		DO J = 1 TO N;
	  		IF ((SURVTIME[I,1] <= T) & (SURVTIME[J,1] > T) & (PI[I,1] > PI[J,1])) THEN CH=CH + (STATUS[I,1]/(N*N*PROBC*(W[I,1])));
	  		IF ((SURVTIME[I,1] <= T) & (SURVTIME[J,1] > T) & (PI[I,1] = PI[J,1])) THEN CH=CH + 0.5*(STATUS[I,1]/(N*N*PROBC*(W[I,1])));
   	 	END;
END;

C_HAT = CH /(PROBT*(1-PROBT));
CREATE CSTAT VAR {CH C_HAT};
APPEND;
CLOSE CSTAT;
QUIT;

TITLE 'Uno time-dependent AUROC';
PROC PRINT DATA = CSTAT; 
RUN;

*test concord;
* SEE UNO 2011 PAPER FOR FORMULA
* Get KM censor probability at EACH PATIENT'S OBS TIME years (chose 4.95 instead of 5 because no one left after 5 years so won't work - took time of last event);

*i get 0.638, same as L3;

PROC IML;
USE OUTKM_EXT_UNO VAR {STATUS SURVTIME PI WSQ};
READ ALL;
SHOW NAMES;
CH = 0;
DH = 0;
/*ENTER TOTAL NUMBER IN DATASET*/
N=686;
/*ENTER TIME*/
T=4.95;

DO I = 1 TO N;
   		DO J = 1 TO N;
	  		IF ((SURVTIME[I,1] < SURVTIME[J,1]) & (PI[I,1] > PI[J,1]) & (SURVTIME[I,1] < T)) THEN CH=CH + (STATUS[I,1]/(WSQ[I,1]));
	  		IF ((SURVTIME[I,1] < SURVTIME[J,1]) & (PI[I,1] = PI[J,1]) & (SURVTIME[I,1] < T)) THEN CH=CH + 0.5*(STATUS[I,1]/(WSQ[I,1]));

			IF ((SURVTIME[I,1] < SURVTIME[J,1]) & (SURVTIME[I,1] < T)) THEN DH=DH + (STATUS[I,1]/(WSQ[I,1]));
   	 	END;
END;

C_HAT = CH /DH;
CREATE CSTAT VAR {CH DH C_HAT};
APPEND;
CLOSE CSTAT;
QUIT;

TITLE 'Uno C';
PROC PRINT DATA = CSTAT; 
RUN;


***** ADDED PGR;

* I get 0.719 instead of 0.724 this way;

PROC IML;
USE OUTKM_EXT_UNO VAR {STATUS SURVTIME PI2 W};
READ ALL;
SHOW NAMES;
CH = 0;
/*ENTER TOTAL NUMBER IN DATASET*/
N=686;
/*ENTER TIME*/
T=4.95;
/*ENTER KM PROB OF CENSOR AT TIME T FROM ABOVE*/
PROBC=0.37674;
/*ENTER KM PROB OF SURVIVAL AT TIME T FROM ABOVE*/
PROBT=0.49939;

DO I = 1 TO N;
   		DO J = 1 TO N;
	  		IF ((SURVTIME[I,1] <= T) & (SURVTIME[J,1] > T) & (PI2[I,1] > PI2[J,1])) THEN CH=CH + (STATUS[I,1]/(N*N*PROBC*(W[I,1])));
	  		IF ((SURVTIME[I,1] <= T) & (SURVTIME[J,1] > T) & (PI2[I,1] = PI2[J,1])) THEN CH=CH + 0.5*(STATUS[I,1]/(N*N*PROBC*(W[I,1])));
   	 	END;
END;

C_HAT = CH /(PROBT*(1-PROBT));
CREATE CSTAT1 VAR {CH C_HAT};
APPEND;
CLOSE CSTAT1;
QUIT;

TITLE 'Uno time-dependent AUROC';
PROC PRINT DATA = CSTAT1; 
RUN;


* for added PGR;
*i get 0.662, which is almost same as L3 i.e. 0.667;

PROC IML;
USE OUTKM_EXT_UNO VAR {STATUS SURVTIME PI2 WSQ};
READ ALL;
SHOW NAMES;
CH = 0;
DH = 0;
/*ENTER TOTAL NUMBER IN DATASET*/
N=686;
/*ENTER TIME*/
T=4.95;

DO I = 1 TO N;
   		DO J = 1 TO N;
	  		IF ((SURVTIME[I,1] < SURVTIME[J,1]) & (PI2[I,1] > PI2[J,1]) & (SURVTIME[I,1] < T)) THEN CH=CH + (STATUS[I,1]/(WSQ[I,1]));
	  		IF ((SURVTIME[I,1] < SURVTIME[J,1]) & (PI2[I,1] = PI2[J,1]) & (SURVTIME[I,1] < T)) THEN CH=CH + 0.5*(STATUS[I,1]/(WSQ[I,1]));

			IF ((SURVTIME[I,1] < SURVTIME[J,1]) & (SURVTIME[I,1] < T)) THEN DH=DH + (STATUS[I,1]/(WSQ[I,1]));
   	 	END;
END;

C_HAT = CH /DH;
CREATE CSTAT VAR {CH DH C_HAT};
APPEND;
CLOSE CSTAT;
QUIT;

TITLE 'Uno C';
PROC PRINT DATA = CSTAT; 
RUN;





*************CALIBRATION ******************;



* This is calibration-in-the-large using Kaplan-Meier and average prediction ;

PROC LIFETEST DATA=L2GBSG_VAL METHOD=KM ATRISK OUTSURV=L2OUTKM_EXT_C /*NOPRINT*/;
        TIME SURVTIME*STATUS(0);
RUN;

DATA L2OUTKM_EXT_C1;
	SET L2OUTKM_EXT_C;
	WHERE _CENSOR_ = 0;
RUN;

*output observed survival at 5 years;
DATA L2OUTKM_EXT_C2;
	SET L2OUTKM_EXT_C1;
	BY _CENSOR_;
	IF LAST._CENSOR_;
	n=1;
	KEEP n SURVIVAL;
RUN;

*output predicted;
proc univariate data=L2GBSG_VAL noprint;
	var prob;
	output out=mean mean=meanpred;
	TITLE ' ';
	proc print;
run;

DATA MEAN1;
	SET MEAN;
	N=1;
RUN;

DATA MEAN2;
	MERGE L2OUTKM_EXT_C2 MEAN1;
	BY N;
	PROP = (1-SURVIVAL)/(meanpred);
	proc print;
RUN;


**********- Bootstrap 95% CIs ***********;

PROC LIFETEST DATA=OUTBOOT METHOD=KM ATRISK OUTSURV=L2OUTKM_EXT_C_ NOPRINT;
		BY REPLICATE;
        TIME SURVTIME*STATUS(0);
RUN;

DATA L2OUTKM_EXT_C1_;
	SET L2OUTKM_EXT_C_;
	WHERE _CENSOR_ = 0;
RUN;

*output observed survival at 5 years;
DATA L2OUTKM_EXT_C2_;
	SET L2OUTKM_EXT_C1_;
	BY REPLICATE _CENSOR_;
	IF LAST._CENSOR_;
	KEEP REPLICATE SURVIVAL;
RUN;

*output predicted;
proc univariate data=OUTBOOT noprint;
	BY REPLICATE;
	var prob;
	output out=mean_ mean=meanpred;
run;

DATA MEAN2_;
	MERGE L2OUTKM_EXT_C2_ MEAN_;
	BY REPLICATE;
	PROP = (1-SURVIVAL)/(meanpred);
	proc print;
RUN;

PROC UNIVARIATE DATA=MEAN2_ NOPRINT;
	VAR PROP;
	OUTPUT OUT = CONFINCAL PCTLPTS=2.5 97.5 PCTLPRE= PROP_ PCTLNAME=LOWER95 UPPER95;
RUN;

DATA CONFINCAL1;
	SET CONFINCAL;
	N=1;
RUN;

DATA CALLARGE;
 	RETAIN PROP PROP_LOWER95 PROP_UPPER95;
	MERGE MEAN2 CONFINCAL1;
	BY N;
	DROP N SURVIVAL MEANPRED;
	TITLE 'External Calibration-in-the-large with 95% CI';
	PROC PRINT;
RUN;





*******************calibration plots using restricted cubic splines********************;


*CHECK FUNCTIONAL FORM OF CLL;
* Code CLL as a restricted cubic spline with 3 knots;
*First calculate the 10th, 50th and 90th percentiles for knots;
PROC UNIVARIATE DATA = L2GBSG_VAL;
	VAR CLL;
	OUTPUT OUT=KNOTS PCTLPRE=P_CLL PCTLPTS= 10 50 90;
RUN;

PROC PRINT DATA=KNOTS; RUN;

/* here we find the following values:
P_CLL10 P_CLL50 P_CLL90 
-1.27273 -0.54373 0.26527 
*/

DATA PREDHar1;
	SET L2GBSG_VAL;
	%RCSPLINE(CLL, -1.27273, -0.54373, 0.26527);
RUN;

PROC UNIVARIATE DATA = PREDHar1 NOPRINT;
	VAR Prob;
	OUTPUT OUT=gridcox PCTLPRE=P_ PCTLPTS= 1 to 99;
RUN;

PROC TRANSPOSE DATA=GRIDCOX OUT=GRIDCOX1;
	VAR P_1 - P_99;
RUN;

DATA GRIDCOX2(RENAME=(COL1=Prob));
	SET GRIDCOX1;
	CLL=LOG(-LOG(1-COL1));
	*WARNING - TAKE THE BELOW FORMULA FROM LOG WINDOW AFTER RUNNING ABOVE RCSPLINE - THIS WILL BE DIFFERENT ACCORDING TO YOUR DATA!;
	 _kd_= (0.26527 - -1.27273)**.666666666666 ;
	CLL1=max((CLL--1.27273)/_kd_,0)**3+((-0.54373--1.27273)*max((CLL-0.26527)/_kd_,0)**3 -(0.26527--1.27273)*max((CLL--0.54373)/_kd_,0)**3)/(0.26527--0.54373);
RUN;

*Calibration for predictions of 5-year survival probabilities;
PROC PHREG DATA=PREDHar1 ZPH(GLOBAL TRANSFORM=LOG);
	MODEL SURVTIME1*STATUS(0)=CLL CLL1/ TIES=EFRON RL;
	BASELINE OUT=GRIDCOX3 COVARIATES=GRIDCOX2 SURVIVAL=PredProb LOWER=L UPPER=U TIMELIST=5;
RUN;

DATA GRIDCOX4;
	SET GRIDCOX3;
	BY Prob;
	IF FIRST.Prob;
	OBSProb=1-PredProb;
	L1=1-U;
	U1=1-L;
	IF _NAME_='P_1' THEN DIAG1=0;
	IF _NAME_='P_1' THEN DIAG2=0;
	IF _NAME_='P_15' THEN DIAG1=1;
	IF _NAME_='P_15' THEN DIAG2=1;
RUN;

proc sort data=gridcox4;
by Prob;
run;

*CREATE DENSITY PLOT;
proc univariate data=PREDHar1 NOPRINT;
   var Prob;
   histogram Prob / kernel midpoints=(0.005 to 0.995 by 0.01) outkernel=OutHist; /* 100 points in [0,1] */
   *ods select histogram;
run;

data density;
   keep _value_ _density_;
   set OutHist;
run;
 
/* Merge the counts with the predicted probabilities. */
data LogiPlot2;
   set gridcox4(keep=Prob ObsProb DIAG1 DIAG2 L1 U1 /*<-ref line*/)
       density;
	Prob1=1-Prob;
	Obs1=1-ObsProb;
   *label y0 = "Count"  y1 = "Count";
  * y0=(_density_/2.3)*0.15 - 0.05/*divide by max value of y's from butterflyfringe and scale and offset below 0*/;
   *R=-0.05;
run;

title;
ODS LISTING SGE=ON STYLE=PRINTER IMAGE_DPI=300 GPATH='C:\Users\sme544\Documents\STRATOS';
ODS GRAPHICS ON / RESET=ALL NOBORDER OUTPUTFMT=TIFF /*WIDTH=4IN*/ IMAGENAME="Calbration plot Ext Harrell with RCS L2" ANTIALIAS=OFF/*ANTIALIASMAX=*/;

PROC SGPLOT DATA=LogiPlot2 NOAUTOLEGEND ;
XAXIS       	LABEL="Predicted probability of recurrence" VALUES=(0 TO 1 BY 0.20);
YAXIS        	LABEL="Observed recurrence" VALUES=(0 TO 1 BY 0.20);
Y2AXIS										VALUES=(0 TO 50 BY 1) DISPLAY=NONE;
  SERIES X=Prob Y=ObsProb / LINEATTRS=(COLOR=RED THICKNESS=2) ;
  BAND X=Prob LOWER=L1 UPPER=U1 / NOFILL LINEATTRS=(COLOR=BLACK PATTERN=MEDIUMDASH THICKNESS=2) NOEXTEND OUTLINE;;
  REG X=DIAG1 Y=DIAG2 / LINEATTRS=(PATTERN=SHORTDASH) MARKERATTRS=(SIZE=1PX SYMBOL=CIRCLEFILLED);
  SERIES X=_value_ Y=_Density_ / LINEATTRS=(COLOR=BLACK THICKNESS=1 PATTERN=1) Y2AXIS;
run;

ods graphics off;


*calculation of ICI for 5 year probabilities;
*Calibration for predictions of 5-year survival probabilities;
DATA PREDHarl_Rep;
	SET PREDHar1;
RUN;

PROC PHREG DATA=PREDHar1 NOPRINT;
	MODEL SURVTIME1*STATUS(0)=CLL CLL1/ TIES=EFRON RL;
	BASELINE OUT=PREDHarl_Rep1 COVARIATES=PREDHarl_Rep SURVIVAL=PredProb2 TIMELIST=5;
RUN;

DATA ICI;
	SET PREDHarl_Rep1;
	*Observed Prob death;
	Prob2=1-PredProb2;
	Diff=ABS(Prob - Prob2);
RUN;

PROC UNIVARIATE DATA=ICI NOPRINT;
	VAR Diff;
	OUTPUT OUT=ICIS MEAN=ICI MEDIAN=E50 P90=E90;
RUN;

DATA ICIS;
	SET ICIS;
	N=1;
RUN;


PROC PRINT;RUN;




******** BOOTSTRAP 95% CI FOR THE CALIBRATION METRICS ********;

*CHECK FUNCTIONAL FORM OF CLL;
* Code CLL as a restricted cubic spline with 3 knots;
*First calculate the 10th, 50th and 90th percentiles for knots;
PROC UNIVARIATE DATA = OUTBOOT NOPRINT;
	BY REPLICATE;
	VAR CLL;
	OUTPUT OUT=KNOTS PCTLPRE=P_CLL PCTLPTS= 10 50 90;
RUN;

DATA PREDHar1_;
	MERGE OUTBOOT KNOTS;
	BY REPLICATE;
RUN;


*This macro runs the RCS on each replicate and appends to PREDHarl_2;
%MACRO SPL;
%DO i=1 %TO 500;
DATA PREDHar1_1;
	SET PREDHar1_;
	WHERE REPLICATE=&i;
	%RCSPLINE(CLL, P_CLL10, P_CLL50, P_CLL90);
RUN;

*duplicate dataset so baseline statement works;
DATA PREDHarl_Rep_;
	SET PREDHar1_1;
RUN;

PROC PHREG DATA=PREDHar1_1 NOPRINT;
	MODEL SURVTIME1*STATUS(0)=CLL CLL1/ TIES=EFRON RL;
	BASELINE OUT=PREDHarl_Rep1_ COVARIATES=PREDHarl_Rep_ SURVIVAL=PredProb2 TIMELIST=5;
RUN;

DATA ICI_;
	SET PREDHarl_Rep1_;
	*Observed Prob death;
	Prob2=1-PredProb2;
	Diff=ABS(Prob - Prob2);
RUN;

PROC UNIVARIATE DATA=ICI_ NOPRINT;
	VAR Diff;
	OUTPUT OUT=ICIS_ MEAN=ICI MEDIAN=E50 P90=E90;
RUN;

DATA ICIS_1;
	SET ICIS_;
	REPLICATE=&i;
RUN;

PROC APPEND BASE=ICIS_2 DATA=ICIS_1 FORCE;
RUN;

%END;
%MEND;
%SPL;

PROC UNIVARIATE DATA=ICIS_2 NOPRINT;
	VAR ICI E50 E90;
	OUTPUT OUT = CONF_MET PCTLPTS=2.5 97.5 PCTLPRE= ICI_ E50_ E90_ PCTLNAME=LOWER95 UPPER95;
RUN;

DATA CONF_MET1;
	SET CONF_MET;
	N=1;
RUN;

DATA CALMETRICS;
 	RETAIN ICI ICI_LOWER95 ICI_UPPER95 E50 E50_LOWER95 E50_UPPER95 E90 E90_LOWER95 E90_UPPER95;
	MERGE ICIS CONF_MET1;
	BY N;
	DROP N;
	TITLE 'External Calibration Metrics with 95% CI';
	PROC PRINT;
RUN;





*********** Calibration for model with pgr - repeat of above but with PR added *********;


PROC LIFETEST DATA=L2GBSG_VAL METHOD=KM ATRISK OUTSURV=L2OUTKM_EXT_C NOPRINT;
        TIME SURVTIME*STATUS(0);
RUN;

DATA L2OUTKM_EXT_C1;
	SET L2OUTKM_EXT_C;
	WHERE _CENSOR_ = 0;
RUN;

*output observed survival at 5 years;
DATA L2OUTKM_EXT_C2;
	SET L2OUTKM_EXT_C1;
	BY _CENSOR_;
	IF LAST._CENSOR_;
	n=1;
	KEEP n SURVIVAL;
RUN;

*output predicted;
proc univariate data=L2GBSG_VAL noprint;
	var prob2;
	output out=mean mean=meanpred;
run;

DATA MEAN1;
	SET MEAN;
	N=1;
RUN;

* L2 we get O/E of 0.95;
DATA MEAN2_pgr;
	MERGE L2OUTKM_EXT_C2 MEAN1;
	BY N;
	PROP = (1-SURVIVAL)/(MEANPRED);
RUN;


******- BOOTSTRAP 95% ci FOR CAL-IN-THE-LARGE WITH PGR;

/*
*No need to rerun below if you have already run for model without PGR;
PROC LIFETEST DATA=OUTBOOT METHOD=KM ATRISK OUTSURV=L2OUTKM_EXT_C_ NOPRINT;
		BY REPLICATE;
        TIME SURVTIME*STATUS(0);
RUN;

DATA L2OUTKM_EXT_C1_;
	SET L2OUTKM_EXT_C_;
	WHERE _CENSOR_ = 0;
RUN;

*output observed survival at 5 years;
DATA L2OUTKM_EXT_C2_;
	SET L2OUTKM_EXT_C1_;
	BY REPLICATE _CENSOR_;
	IF LAST._CENSOR_;
	KEEP REPLICATE SURVIVAL;
RUN;

*/

*output predicted;
proc univariate data=OUTBOOT noprint;
	by replicate;
	var prob2;
	output out=mean__ mean=meanpred;
	TITLE ' ';
	proc print;
run;

* L2 we get O/E of 0.95;
DATA MEAN2_pgr_;
	MERGE L2OUTKM_EXT_C2_ MEAN__;
	BY REPLICATE;
	PROP = (1-SURVIVAL)/(MEANPRED);
RUN;

PROC UNIVARIATE DATA=MEAN2_pgr_ NOPRINT;
	VAR PROP;
	OUTPUT OUT = CONFINCAL_ PCTLPTS=2.5 97.5 PCTLPRE= PROP_ PCTLNAME=LOWER95 UPPER95;
RUN;

DATA CONFINCAL1_;
	SET CONFINCAL_;
	N=1;
RUN;

DATA CALLARGE_;
 	RETAIN PROP PROP_LOWER95 PROP_UPPER95;
	MERGE MEAN2_pgr CONFINCAL1_;
	BY N;
	DROP N SURVIVAL MEANPRED;
	TITLE 'External Calibration-in-the-large with 95% CI (PGR included)';
	PROC PRINT;
RUN;






*******calibration plots using restricted cubic splines;

*CHECK FUNCTIONAL FORM OF CLL;
* Code PGR as a restricted cubic spline with 3 knots;
*First calculate the 10th, 50th and 90th percentiles for knots;
PROC UNIVARIATE DATA = L2GBSG_VAL;
	VAR CLL_;
	OUTPUT OUT=KNOTS PCTLPRE=P_CLL PCTLPTS= 10 50 90;
RUN;

PROC PRINT DATA=KNOTS; RUN;

/* here we find the following values:

P_CLL10 P_CLL50 P_CLL90 
-1.09941 -0.43046 0.28605 
*/

DATA PREDHarPGR1;
	SET L2GBSG_VAL;
	%RCSPLINE(CLL_, -1.09941, -0.43046, 0.28605);
RUN;

PROC UNIVARIATE DATA = PREDHarPGR1 NOPRINT;
	VAR Prob2;
	OUTPUT OUT=gridcox PCTLPRE=P_ PCTLPTS= 1 to 99;
RUN;

PROC TRANSPOSE DATA=GRIDCOX OUT=GRIDCOX1;
	VAR P_1 - P_99;
RUN;

DATA GRIDCOX2(RENAME=(COL1=Prob));
	SET GRIDCOX1;
	CLL_=LOG(-LOG(1-COL1));
	*WARNING - TAKE THE BELOW FORMULA FROM LOG WINDOW AFTER RUNNING ABOVE RCSPLINE - THIS WILL BE DIFFERENT ACCORDING TO YOUR DATA!;
 	_kd_= (0.28605 - -1.09941)**.666666666666 ;
	CLL_1=max((CLL_--1.09941)/_kd_,0)**3+((-0.43046--1.09941)*max((CLL_-0.28605)/_kd_,0)**3 -(0.28605--1.09941)*max((CLL_--0.43046)/_kd_,0)**3)/(0.28605--0.43046);
RUN;

*Calibration for predictions of 5-year survival probabilities;
PROC PHREG DATA=PREDHarPGR1 ZPH(GLOBAL TRANSFORM=LOG);
	MODEL SURVTIME1*STATUS(0)=CLL_ CLL_1/ TIES=EFRON RL;
	BASELINE OUT=GRIDCOX3 COVARIATES=GRIDCOX2 SURVIVAL=PredProb LOWER=L UPPER=U TIMELIST=5;
RUN;

DATA GRIDCOX4;
	SET GRIDCOX3;
	BY Prob;
	IF FIRST.Prob;
	OBSProb=1-PredProb;
	L1=1-U;
	U1=1-L;
	IF _NAME_='P_1' THEN DIAG1=0;
	IF _NAME_='P_1' THEN DIAG2=0;
	IF _NAME_='P_15' THEN DIAG1=1;
	IF _NAME_='P_15' THEN DIAG2=1;
RUN;


proc sort data=gridcox4;
by Prob;
run;

*CREATE DENSITY PLOT;
proc univariate data=PREDHarPGR1;
   var Prob2;
   histogram Prob2 / kernel midpoints=(0.005 to 0.995 by 0.01) outkernel=OutHist; /* 100 points in [0,1] */
   *ods select histogram;
run;

data density;
   keep _value_ _density_;
   set OutHist;
run;
 
/* Merge the counts with the predicted probabilities. */
data LogiPlot2;
   set gridcox4(keep=Prob ObsProb DIAG1 DIAG2 L1 U1 /*<-ref line*/)
       density;
	Prob1=1-Prob;
	Obs1=1-ObsProb;
run;

title;
ODS LISTING SGE=ON STYLE=PRINTER IMAGE_DPI=300 GPATH='C:\Users\sme544\Documents\STRATOS';
ODS GRAPHICS ON / RESET=ALL NOBORDER OUTPUTFMT=TIFF /*WIDTH=4IN*/ IMAGENAME="Calbration plot PGR Ext Harrell with RCS L2" ANTIALIAS=OFF/*ANTIALIASMAX=*/;

PROC SGPLOT DATA=LogiPlot2 NOAUTOLEGEND ;
XAXIS       	LABEL="Predicted probability of recurrence" VALUES=(0 TO 1 BY 0.20);
YAXIS        	LABEL="Observed recurrence" VALUES=(0 TO 1 BY 0.20);
Y2AXIS										VALUES=(0 TO 50 BY 1) DISPLAY=NONE;
  SERIES X=Prob Y=OBSPROB / LINEATTRS=(COLOR=RED THICKNESS=2) ;
  BAND X=Prob LOWER=L1 UPPER=U1 / NOFILL LINEATTRS=(COLOR=BLACK PATTERN=MEDIUMDASH THICKNESS=2) NOEXTEND OUTLINE;
  REG X=DIAG1 Y=DIAG2 / LINEATTRS=(PATTERN=SHORTDASH) MARKERATTRS=(SIZE=1PX SYMBOL=CIRCLEFILLED);
  SERIES X=_value_ Y=_Density_ / LINEATTRS=(COLOR=BLACK THICKNESS=1 PATTERN=1) Y2AXIS;
run;

ods graphics off;

*calculation of ICI for 5 year probabilities;
*Calibration for predictions of 5-year survival probabilities;
DATA PREDHarPGRl_Rep;
	SET PREDHarPGR1;
RUN;

PROC PHREG DATA=PREDHarPGR1;
	MODEL SURVTIME1*STATUS(0)=CLL_ CLL_1/ TIES=EFRON RL;
	BASELINE OUT=PREDHarPGRl_Rep1 COVARIATES=PREDHarPGRl_Rep SURVIVAL=PredProb2 TIMELIST=5;
RUN;

DATA ICI_PGR;
	SET PREDHarPGRl_Rep1;
	*Observed Prob death;
	Prob3=1-PredProb2;
	Diff=ABS(Prob2 - Prob3);
RUN;

PROC UNIVARIATE DATA=ICI_PGR NOPRINT;
	VAR Diff;
	OUTPUT OUT=ICI_PGRS MEAN=ICI MEDIAN=E50 P90=E90;
RUN;

DATA ICI_PGRS;
	SET ICI_PGRS;
	N=1;
RUN;

PROC PRINT; RUN;

/*
ICI E90 E50 
0.034929 0.086532 0.023027;
*/

******** BOOTSTRAP 95% CI FOR THE CALIBRATION METRICS ********;

*CHECK FUNCTIONAL FORM OF CLL;
* Code CLL as a restricted cubic spline with 3 knots;
*First calculate the 10th, 50th and 90th percentiles for knots;
*NB - CLL IS FOR MODEL WITHOUT PGR, AND CLL_ IS FOR MODEL WITH PGR;

PROC UNIVARIATE DATA = OUTBOOT NOPRINT;
	BY REPLICATE;
	VAR CLL_;
	OUTPUT OUT=KNOTS PCTLPRE=P_CLL PCTLPTS= 10 50 90;
RUN;

DATA PREDHarPGR1_;
	MERGE OUTBOOT KNOTS;
	BY REPLICATE;
RUN;

*This macro runs the RCS on each replicate and appends to PREDHarl_2;
%MACRO SPL1;
%DO i=1 %TO 500;
DATA PREDHar1_1;
	SET PREDHarPGR1_;
	WHERE REPLICATE=&i;
	%RCSPLINE(CLL_, P_CLL10, P_CLL50, P_CLL90);
RUN;

*duplicate dataset so baseline statement works;
DATA PREDHarl_Rep_;
	SET PREDHar1_1;
RUN;

PROC PHREG DATA=PREDHar1_1 NOPRINT;
	MODEL SURVTIME1*STATUS(0)=CLL_ CLL_1/ TIES=EFRON RL;
	BASELINE OUT=PREDHarl_Rep1_ COVARIATES=PREDHarl_Rep_ SURVIVAL=PredProb2 TIMELIST=5;
RUN;

DATA ICI_;
	SET PREDHarl_Rep1_;
	*Observed Prob death;
	Prob3=1-PredProb2;
	Diff=ABS(Prob2 - Prob3);
RUN;

PROC UNIVARIATE DATA=ICI_ NOPRINT;
	VAR Diff;
	OUTPUT OUT=ICIS_ MEAN=ICI MEDIAN=E50 P90=E90;
RUN;

DATA ICIS_1;
	SET ICIS_;
	REPLICATE=&i;
RUN;

PROC APPEND BASE=ICIS_3 DATA=ICIS_1 FORCE;
RUN;

%END;
%MEND;
%SPL1;

PROC UNIVARIATE DATA=ICIS_3 NOPRINT;
	VAR ICI E50 E90;
	OUTPUT OUT = CONF_MET_ PCTLPTS=2.5 97.5 PCTLPRE= ICI_ E50_ E90_ PCTLNAME=LOWER95 UPPER95;
RUN;

DATA CONF_MET_1;
	SET CONF_MET_;
	N=1;
RUN;

DATA CALMETRICS_;
 	RETAIN ICI ICI_LOWER95 ICI_UPPER95 E50 E50_LOWER95 E50_UPPER95 E90 E90_LOWER95 E90_UPPER95;
	MERGE ICI_PGRS CONF_MET_1;
	BY N;
	DROP N;
	TITLE 'External Calibration Metrics with 95% CI for model with PGR added';
	PROC PRINT;
RUN;





*** DCA;


*external;

%PUT _user_;
GOPTIONS RESET = ALL;

symbol1 i=join c=green;
symbol2 i=join c=red;
symbol3 i=join c=blue;
symbol4 i=join c=darkred;
symbol5 i=join c=gray;

%STDCA(data=L2GBSG_VAL, out=survivalmult, outcome=STATUS, ttoutcome=SURVTIME, timepoint=5, predictors=PROB);
%STDCA(data=L2GBSG_VAL, out=survivalmult_new, outcome=STATUS, ttoutcome=SURVTIME, timepoint=5, predictors=PROB2);

*Sort by threshold variable;
PROC SORT DATA=survivalmult OUT=kmsort;
	BY threshold;
RUN;

*Rename the variables so that we know they are the Kaplan Meier estimates;
DATA kmsort; SET kmsort(RENAME=(PROB=kmmodel all=kmall));
	LABEL kmmodel="Original model: Pr(Recurrence) at 5 years";
	LABEL kmall="Treat All";
RUN;

*Sort by threshold variable;
PROC SORT DATA=survivalmult_new OUT=crsort;
	BY threshold;
RUN;

*Rename the variables so that we know they are the Competing Risk estimates;
DATA crsort; SET crsort(RENAME=(PROB2=crmodel all=crall));
	LABEL crmodel="Original + PGR: Pr(Recurrence) at 5 years";
RUN;

*Merge Kaplan-Meier and Competing Risk data using threshold probabilities;
DATA crsort;
	MERGE kmsort crsort;
	BY threshold;
RUN;

data stratos.netbenext;
	set crsort;
run;


title;
FOOTNOTE;
*- this allows editing of the .sge file!;
ODS LISTING SGE=ON STYLE=PRINTER IMAGE_DPI=300 GPATH='C:\Users\sme544\Documents\STRATOS';
ODS GRAPHICS ON / RESET=ALL NOBORDER OUTPUTFMT=TIFF /*WIDTH=4IN*/ IMAGENAME="dca with spline PGR ext L2" ANTIALIAS=OFF/*ANTIALIASMAX=*/;

*create graph (decision curve) with treat none, treat all, Kaplan-Meier method, and Competing Risks method;
PROC SGPLOT DATA=crsort;
	YAXIS VALUES=(-0.05 to 0.55 by 0.05) LABEL="Net Benefit";
	XAXIS VALUES=(0.0 to 1 by 0.1) LABEL="Threshold Probability";
	KEYLEGEND "all" "orig" "new" "none" / DOWN=4 POSITION=BOTTOM;
	SERIES Y=kmall X=threshold / LINEATTRS=(COLOR=BLACK THICKNESS=2 PATTERN=SOLID) NAME="all" LEGENDLABEL="Treat All";
		 /*crall*threshold*/
	SERIES Y=kmmodel X=threshold / LINEATTRS=(COLOR=GREEN THICKNESS=2 PATTERN=SOLID) NAME="orig" LEGENDLABEL="Original model: Pr(Rec) at 5 years";
	SERIES Y=crmodel X=threshold / LINEATTRS=(COLOR=BLUE THICKNESS=2 PATTERN=SOLID) NAME="new" LEGENDLABEL="Original model + PGR: Pr(Rec) at 5 years";
	SERIES Y=none X=threshold / LINEATTRS=(COLOR=RED THICKNESS=2 PATTERN=SOLID)  NAME="none" LEGENDLABEL="None";
RUN;

ODS GRAPHICS OFF;


